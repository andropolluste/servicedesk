package ee.servicedesk.model;

import java.io.Serializable;
import java.time.LocalDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotNull;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import org.hibernate.validator.constraints.Length;

/**
 * Ticket entity with rule set required for storing in database.
 *
 * @author Andro PÃµlluste
 */
@Getter
@Setter
@ToString
@Entity
public class Ticket implements Serializable {

    private static final long serialVersionUID = -164584582231585249L;

    /** Unique id of ticket. Autogenerated on storing to database */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    /**
     * Ticket title.
     * Mandatory value between 1 and 100 characters.
     */
    @Length(min = 1, max = 100, message =  "Title must be between 1 and 100 characters")
    private String title;

    /**
     * Detailed description of ticket.
     * Mandatory value between 1 and 4000 characters.
    */
    @Length(min = 1, max = 4000, message = "Description must be between 1 and 4000 characters")
    private String description;

    /**
     * Email of person reporting ticket.
     * Mandatory valid email up to 100 characters.
     * @see Email
     */
    @Email(message = "Valid email must be used.")
    @Length(min = 1, max = 100, message = "Email must be up to 100 characters")
    private String email;

    /**
     * Priority of ticket.
     * Possible options are defined in {@link TicketPriority}.
     */
    @NotNull(message = "Priority must exist")
    @Enumerated(EnumType.STRING)
    private TicketPriority priority;

    /**
     * Ticket status.
     * Possible options are defined in {@link TicketStatus}.
     * Initially ticket is created with status {@code TicketStatus.NEW}.
     */
    @NotNull(message = "Status must exist")
    @Enumerated(EnumType.STRING)
    private TicketStatus status = TicketStatus.NEW;

    /**
     * Creation time of ticket.
     * Should not be changed after persisting ticket to database.
     */
    @Column(name = "created_time", columnDefinition = "TIMESTAMP NOT NULL")
    private LocalDateTime createdTime;

    /**
     * Update time of ticket when ticket is changed.
     * Should be set or updated when ticket is changed.
     */
    @Column(name = "updated_time", columnDefinition = "TIMESTAMP")
    private LocalDateTime updatedTime;

    /**
     * Shorthand function to determined, if ticket has been persisted yet or not by {@code id} being null or not.
     *
     * @return true, if ticket {@code id} is null and ticket is new (not persisted yet)
     */
    public boolean isNew() {
        return id == null;
    }

}
